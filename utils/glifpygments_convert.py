'''
    Generates CodeMirror highlighter using https://github.com/ComFreek/mmtpygments
'''

import pygments
import pygments.lexer
def naryId(*args): return args
pygments.lexer.bygroups = naryId
import mmtpygments
from mmtpygments.pygments_to_codemirror import PygmentsToCodeMirrorConverter
import glif
import glif.glifpygments

# glif.glifpygments.IS_CONVERSION_MODE = True

class GlifPygmentsConverter(PygmentsToCodeMirrorConverter):
    def transform_single_token_type(self, token_type):
        ''' see codemirror.css or theme/abcdef.css '''
        s = PygmentsToCodeMirrorConverter.transform_single_token_type(self, token_type)
        # TODO: Move these cases into mmtpygments
        if s == "'Generic.Heading'":
            return '"header"'
        if s == "'Name'":
            return '"variable"'
        if s == "'Name.Builtin'":
            return '"builtin"'
        return s

    def transform_lexer_header(self, python_lexer_class):
        print(f"INFO: ignoring {python_lexer_class}.{{aliases, filenames}} for conversion since CodeMirror doesn't have such concepts")

        mode_name = python_lexer_class.codemirror_name
        python_lexer_source = python_lexer_class.rouge_original_source,

        return f"""// remove this (?): CodeMirror, copyright (c) by Marijn Haverbeke and others
// remove this (?): Distributed under an MIT license: https://codemirror.net/LICENSE

// DO NOT EDIT - AUTOGENERATED
//
// This mode has been autogenerated from the Pygments lexer [1] by the script [2].
//
// [1]: {python_lexer_source}
// [2]: https://github.com/ComFreek/mmtpygments/blob/master/mmtpygments/pygments_to_codemirror.py

function loadGlifHighlighting(CodeMirror) {{
    "use strict";

    CodeMirror.defineAdvancedMode("{mode_name}", {{
"""

    def transform_lexer_footer(self, regex_lexer):
        return "\t});\n}"

if __name__ == '__main__':
    import os
    converter = GlifPygmentsConverter()
    with open(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../glif_kernel/js/loadGlifHighlighting.js'), 'w') as fp:
        fp.write(converter.transform(glif.glifpygments.GLIFLexer))


