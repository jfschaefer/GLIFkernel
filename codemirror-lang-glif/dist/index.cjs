'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var lr = require('@lezer/lr');
var language = require('@codemirror/language');
var highlight = require('@lezer/highlight');

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_identifier = {__proto__:null,p:40, parse:40, l:40, linearize:40};
const parser = lr.LRParser.deserialize({
  version: 14,
  states: "$[QYQPOOOOQO'#C_'#C_O_QPO'#CnOsQPO'#CmOOQO'#Cf'#CfQYQPOOOOQO'#Cd'#CdOOQO'#Cr'#CrO!OQPO'#CqOOQO'#Cg'#CgO!fQPO,59YOOQO'#Ch'#ChO!TQPO,59YOYQPO'#CiO!mQPO,59XOOQO-E6d-E6dOOQO'#Ca'#CaO!xQPO,59]OOQO-E6e-E6eO#aQPO1G.tOOQO-E6f-E6fOOQO,59T,59TOOQO-E6g-E6gO#rQPO1G.wOOQO7+$c7+$c",
  stateData: "#z~O`OSPOS~OdPO~OSWOVVOcUOXbX^bXdbX~OX]O^aXdaX~Oc`O~OVVOcUOXba^badba~OSWO~P!TOX]O^aadaa~OUgOSeaVeaXea^eaceadea~OVVOcUOXbi^bidbi~OVVOcUO~O",
  goto: "!}gPPPhPmPPpPw}!T!_PPP!e!iPP!p!tVQOT]RaWZVQY[cgQTOR_TQYQRbYQ[QQcYTd[cQ^RRf^TSOTSROTRe]TXQYWZQY[cRhg",
  nodeNames: "âš  LineComment Program CommandName - ArgName = String Keywordval Pipe",
  maxTerm: 22,
  skippedNodes: [0,1],
  repeatNodeCount: 4,
  tokenData: "%V~R]XYzYZz]^zpqzrs!]st#y}!O$b!Q![$g!_!`${!c!}$g#R#S$g#T#o$g#p#q%Q~!PS`~XYzYZz]^zpqz~!`VOr!]rs!us#O!]#O#P!z#P;'S!];'S;=`#s<%lO!]~!zOV~~!}RO;'S!];'S;=`#W;=`O!]~#ZWOr!]rs!us#O!]#O#P!z#P;'S!];'S;=`#s;=`<%l!]<%lO!]~#vP;=`<%l!]~$OSP~OY#yZ;'S#y;'S;=`$[<%lO#y~$_P;=`<%l#y~$gOS~~$lTc~}!O$g!Q![$g!c!}$g#R#S$g#T#o$g~%QOU~~%VOX~",
  tokenizers: [0],
  topRules: {"Program":[0,2]},
  specialized: [{term: 19, get: (value) => spec_identifier[value] || -1}],
  tokenPrec: 0
});

const GLIFlanguage = language.LRLanguage.define({
    parser: parser.configure({
        props: [
            highlight.styleTags({
                CommandName: highlight.tags.keyword,
                String: highlight.tags.string,
                LineComment: highlight.tags.lineComment,
                Pipe: highlight.tags.meta,
                ArgName: highlight.tags.propertyName,
                Keywordval: highlight.tags.labelName,
            })
        ]
    }),
    languageData: {
        commentTokens: { line: "#" }
    }
});
function GLIF() {
    return new language.LanguageSupport(GLIFlanguage);
}

exports.GLIF = GLIF;
exports.GLIFlanguage = GLIFlanguage;
