// top-level grammar for GLIF cells in a notebook (parsers from other grammars will be nested)

@top Cell {
    GfCell | ScriptCell | MmtCell | ElpiCell
}

@skip { space }

// GF
GfCell { ( GfHeader UnmatchedGfContent ) | MatchedGfContent }
GfHeader { gf_intro_token colon identifier }
UnmatchedGfContent { anyToken* eof }
MatchedGfContent { gf_token anyToken* eof }

// MMT
MmtCell { ( MmtHeader UnmatchedMmtContent ) | MatchedMmtContent }
MmtHeader { mmt_intro_token colon identifier }
UnmatchedMmtContent { anyToken* eof }
MatchedMmtContent { mmt_token anyToken* eof }

// ELPI
ElpiCell { ElpiHeader UnmatchedElpiContent }
ElpiHeader { elpi_intro_token colon identifier }
UnmatchedElpiContent { anyToken* eof }

// Script
ScriptCell { MatchedScriptContent | ( ScriptHeader UnmatchedScriptContent ) }
ScriptHeader { script_intro_token colon identifier }
UnmatchedScriptContent { anyToken* eof }
MatchedScriptContent { script_token anyToken* eof }

gf_token { si<"abstract" | "concrete" | "incomplete" | "resource" | "interface" | "instance"> }
mmt_token { si<"theory" | "view"> }
script_token { si<"parse" | "p" | "linearize" | "l"> }
gf_intro_token { si<"gf"> }
mmt_intro_token { si<"mmt"> }
elpi_intro_token { si<"elpi" | "elpi-notc"> }
script_intro_token { si<"script"> }
si<id> { @specialize<identifier, id> }

// somehow, the specializations are not identifiers anymore in other places as well.
// I think I lack a lot of background understanding to really get this right.
// generic_identifier { identifier | script_token | mmt_token | gf_token | gf_intro_token | mmt_intro_token | elpi_intro_token | script_intro_token }
anyToken { colon | symbol | identifier | script_token | gf_token | mmt_token | gf_intro_token | mmt_intro_token | elpi_intro_token | script_token }

@tokens {
    space { $[ \t\n\r]+ }
    colon { ":" }
    identifier { $[a-zA-Z0-9_.-]+ }
    symbol { ![ \t\n\r:a-zA-Z0-9_.-] }
    eof { @eof }
}

@detectDelim

